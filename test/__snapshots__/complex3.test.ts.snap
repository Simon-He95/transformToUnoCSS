<template>
  <div class="user-item flex flex-row gap-10px min-h-28px overflow-hidden px-12px py-8px box-content bg-[#fff] items-center cursor-default [&:hover]-bg-[var(--gray-08,rgba(245,246,248,0.8))]" @click="onClick">
    <span class="checkbox" v-if="pickMode" :class="{ checked: checked }"></span>
    <ChannelAvatar
      :avatar="avatar"
      :name="name"
      :color-seed="colorSeed"
      :isOneToOne="item?.one_to_one == 1"
    >
    </ChannelAvatar>
    <div class="user-item__info flex flex-col grow-1 shrink-1 max-w-200px">
      <div class="flex flex-row items-center gap-1">
        <div
          v-if="showedName"
          class="name text-14px font-not-italic font-400 lh-20px min-h-20px max-w-70px shrink-0 text-[var(--color-text-1)] break-all truncate"
          :class="[!department && '!max-w-[150px]']"
        >
          {{ showedName }}
        </div>
        <ExternalTag v-if="is_external" class="whitespace-nowrap"></ExternalTag>
        <div
          class="text-gray-500 text-xs font-normal truncate"
          v-if="is_external && isSingleChatUser && showedTenantName"
        >
          {{ showedTenantName }}
        </div>
      </div>
      <div class="user-item__info__department text-12px font-400 lh-20px text-[#6b7280] text-ellipsis break-all line-clamp-2">{{ department }}</div>
    </div>
    <div class="extra shrink-0">
      <slot name="extra"></slot>
    </div>
  </div>
</template>
<script lang="ts" setup>
import { stringToHashNum } from '@renderer/apps/nextim/utils/avatarSeed'
import { computed } from 'vue'
import ChannelAvatar from '../channel/ChannelAvatar.vue'
import { loginStore } from '@renderer/apps/nextim/stores/login/login.store'
import { globalStore } from '@renderer/apps/nextim/stores/global.store'
import ExternalTag from '@renderer/apps/nextim/components/contact/ExternalTag.vue'
const props = defineProps<{
  pickMode: boolean
  avatar?: string
  name: string
  checked?: boolean
  item: any
}>()

// 是否是单聊用户
const isSingleChatUser = computed(() => props.item.one_to_one === 1)

const showedName = computed(() => {
  const text = props.name || props.item.display_name || ''
  if (text.length > 15) {
    return Array.from(text).slice(0, 12).join('') + '...'
  } else {
    return text
  }
})
const is_external = computed(() => {
  // console.log('useritem', props.item)
  // return props.item.tenant_id !== globalStore.tenant_id && !props.item.type
  return props.item.is_external === 1
})
const showedTenantName = computed(() => {
  if (props.item.tenant_id === globalStore.tenant_id) return ''

  const tenant = loginStore.allTenantMap.get(props.item.tenant_id)
  if (tenant) {
    return tenant.tenantDisplayName || tenant.tenantName || ''
  }
})
const department = computed(() => {
  if (props.item.department) {
    return props.item.department
  }
  return ''
})
const colorSeed = computed(() => {
  if (props.item.id) {
    const numb = stringToHashNum(props.item.id)
    return numb
  } else {
    return 10000
  }
})
const emits = defineEmits(['click'])
const onClick = () => {
  emits('click')
}
</script>
<style scoped>.user-item .checkbox {
  width: 16px;
  height: 16px;
  display: block;
  margin-top: 8px;
  align-self: flex-start;
  flex-shrink: 0;
  background-image: url("@renderer/apps/nextim/assets/uncheck.svg");
}
.user-item .checkbox.checked {
  background-image: url("@renderer/apps/nextim/assets/checked.svg");
}
.user-item .avatar {
  height: 28px;
  width: 28px;
  line-height: 28px;
  align-self: flex-start;
}
.user-item .avatar img {
  height: 100%;
  width: 100%;
}
.user-item .avatar.avatar-text {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 10px;
  color: #8b91a0;
  background-color: #d9dce5;
  border-radius: 20px;
}</style>
